import flixel.FlxG;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import funkin.modding.events.ScriptEvent;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.song.Song;
import funkin.modding.module.ModuleHandler;

import ObjectHandler;

class ChaosSong extends Song
{
	public var opponentFloatOffset:Float = 0;

    var hasPlayedInGameCutscene:Bool;
    var quickTimeActive:Bool = false;
    var spacePressed:Bool = false;

	public var chamber:String;
	public var chamberEmerald1:String;
	public var chamberEmerald2:String;
	public var dad:String;

	public var quickTime:FunkinSprite;
	
	var cutsceneTimers:Array<FlxTimer> = [];

	public function new()
	{
		super('chaos');
		hasPlayedInGameCutscene = false;
		
	}

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		ObjectHandler.preloadFleetwayTextures(); // Preload Fleetway textures

		swappingNotestylesModule = ModuleHandler.getModule('SwappingNotestyles');
		doQuickTime = ModuleHandler.getModule("EXEOptions").scriptGet("quickTimeEvents");
		doBloodSplash = ModuleHandler.getModule("EXEOptions").scriptGet("bloodsplashes");

		chamber = PlayState.instance.currentStage.getNamedProp('Chamber');
		chamberEmerald1 = PlayState.instance.currentStage.getNamedProp('ChamberRainEmerald');
		chamberEmerald2 = PlayState.instance.currentStage.getNamedProp('ChamberRainEmerald2');
		dad = PlayState.instance.currentStage.getDad();
		
		if (doQuickTime) {
			initializeQuickTime();
		}

		hasPlayedInGameCutscene = false;

        if (!doBloodSplash && swappingNotestylesModule != null) {
            swappingNotestylesModule.scriptCall('swapStrumlines', ['exeSemi']);
        }
	}
	
	function initializeQuickTime():Void {
		quickTime = FunkinSprite.create(170, 30);
        quickTime.frames = Paths.getSparrowAtlas('spacebar_icon');
        quickTime.animation.addByPrefix('idle', 'spacebar00', 24, false);
		quickTime.scale.set(0.45, 0.45);
        quickTime.zIndex = 5000;
		quickTime.cameras = [PlayState.instance.camCutscene];
		PlayState.instance.add(quickTime);
		quickTime.visible = false;
		quickTime.updateHitbox();
	}

	function onStepHit(event:SongTimeScriptEvent):Void {
		super.onStepHit(event);

		if (doQuickTime) {
			if (event.step == 258) {
				quickTime.visible = true;
				quickTime.animation.play('idle');
				quickTimeActive = true;
				spacePressed = false;
			}
			
			var endStep = FlxG.onMobile ? 285 : 275;
			
			if (event.step == endStep) {
				quickTime.visible = false;
				if (quickTimeActive && !spacePressed) {
					PlayState.instance.health = 0;
				}
				quickTimeActive = false;
			}
		}
		
		if (event.step == 1008) {
			
			FlxG.camera.shake(0.05, 0.5);
			PlayState.instance.camHUD.shake(0.03, 0.5);
		}
	}

	function onUpdate(event:UpdateScriptEvent):Void {
		super.onUpdate(event);
		
		if (doQuickTime && quickTimeActive) {
			if (FlxG.keys.justPressed.SPACE) {
				handleQuickTimeSuccess();
			}
			
			if (quickTime.visible && FlxG.mouse.justPressed && FlxG.mouse.overlaps(quickTime)) {
				handleQuickTimeSuccess();
			}
		}
	}
	
	function handleQuickTimeSuccess():Void {
		spacePressed = true;
		quickTime.visible = false;
		quickTimeActive = false;
	}

	public override function onCountdownStart(event:CountdownScriptEvent):Void {
        super.onCountdownStart(event);

		if (!hasPlayedInGameCutscene) {
			hasPlayedInGameCutscene = true;
			event.cancel();
			introCutscene();
		}
	}

	function introCutscene():Void {
		dad.y = 1000;
		dad.visible = false;
		PlayState.instance.currentStage.refresh();
		disableHud();
		PlayState.instance.tweenCameraToPosition(-50, 100, 0);

		doCutsceneFr(chamber, chamberEmerald1, chamberEmerald2, dad);
	}
	
	function doCutsceneFr(chamber:Dynamic, chamberEmerald1:Dynamic, chamberEmerald2:Dynamic, dad:Dynamic):Void {
		cutsceneTimers.push(new FlxTimer().start(1, function(tmr) {
			PlayState.instance.tweenCameraZoom(1.1, 1, true, FlxEase.quadInOut);
			FlxG.camera.flash(0xFFFF0000, 1);  
			FunkinSound.playOnce(Paths.sound("robot"));
		}));
		
		cutsceneTimers.push(new FlxTimer().start(2, function(tmr) {
			FunkinSound.playOnce(Paths.sound("sonic"));
			chamber.animation.play('wowSonic');
		}));
		
		cutsceneTimers.push(new FlxTimer().start(5, function(tmr) {
			PlayState.instance.tweenCameraZoom(0.7, 0.3, true, FlxEase.quadInOut);
			FunkinSound.playOnce(Paths.sound("beam"));
			chamberEmerald1.zIndex = -4;
			chamberEmerald2.zIndex = -3;
			PlayState.instance.currentStage.refresh();
		}));
		
		cutsceneTimers.push(new FlxTimer().start(6, function(tmr) {
			PlayState.instance.isInCutscene = false;
			PlayState.instance.startCountdown();
			enableHud();
		}));
		
		cutsceneTimers.push(new FlxTimer().start(7.85, function(tmr) {
			FlxTween.tween(dad, {y: -800}, 0.6);
			
			new FlxTimer().start(0.15, function(innerTmr) {
				dad.visible = true;
				PlayState.instance.tweenCameraToPosition(-100, -300, 0.85);
			});
		}));
	}

	override function buildStage()
	{
		super.buildStage();
	}

	function disableHud() {
		PlayState.instance.camHUD.alpha = 0;
	}

	function enableHud() {
		FlxTween.tween(PlayState.instance.camHUD, {alpha: 1}, 1);
	}
	
	function onSongRetry(event:ScriptEvent)
	{
		super.onSongRetry(event);
		hasPlayedInGameCutscene = true;
		
		cleanupTimers();
	}
	
	function cleanupTimers():Void {
		for (timer in cutsceneTimers) {
			if (timer != null && timer.active) {
				timer.cancel();
			}
		}
		cutsceneTimers = [];
	}
	
	override function onDestroy(event:ScriptEvent):Void {
		cleanupTimers();
		super.onDestroy(event);
	}
}