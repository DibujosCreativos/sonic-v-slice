import flixel.FlxG;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import flixel.tweens.FlxTween;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.util.Constants;
import funkin.FunkinMemory;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import funkin.ui.FullScreenScaleMode;
import funkin.modding.module.ModuleHandler;

class XenoStage extends Stage
{
	public var cutoutSize = FullScreenScaleMode.gameCutoutSize.x / 2.5;
    public var originalPlayerStrumlineX:Float = (FlxG.width / 2 + Constants.STRUMLINE_X_OFFSET) + (cutoutSize / 2.0); // exact strumline offsets ripped from source code
	public var originalOpponentStrumlineX:Float = Constants.STRUMLINE_X_OFFSET + cutoutSize;

	public var jumpPosX:Float = FlxG.onMobile ? 200 : 0;
    public var tailsJump:FunkinSprite;
	public var knucklesJump:FunkinSprite;
	public var eggmanJump:FunkinSprite;
	public var screenGlitch1:FunkinSprite;

	public var doJumpscares:Bool = true;

	public function new()
	{
		super('xenoStage');
	}

	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		FunkinMemory.cacheSound(Paths.sound("TailsScreamLOL", "shared"));
		FunkinMemory.cacheSound(Paths.sound("KnucklesScreamLOL", "shared"));
		FunkinMemory.cacheSound(Paths.sound("EggmanScreamLOL", "shared"));

		doJumpscares = ModuleHandler.getModule("EXEOptions").scriptGet("dojumpscares");

        blackOverlay = new FlxSprite(0, 0);
        blackOverlay.makeGraphic(FlxG.width, FlxG.height, 0xFF000000);
        blackOverlay.scrollFactor.set();
        blackOverlay.cameras = [PlayState.instance.camCutscene];
		blackOverlay.zIndex = -1;
		blackOverlay.alpha = 0;
        PlayState.instance.add(blackOverlay);

		tailsJump = FunkinSprite.create(jumpPosX, 0, 'Tails');
		tailsJump.cameras = [PlayState.instance.camCutscene];
		tailsJump.alpha = 0;
		PlayState.instance.add(tailsJump);

		knucklesJump = FunkinSprite.create(jumpPosX, 0, 'Knuckles');
		knucklesJump.cameras = [PlayState.instance.camCutscene];
		knucklesJump.alpha = 0;
		PlayState.instance.add(knucklesJump);

		eggmanJump = FunkinSprite.create(jumpPosX, 0, 'Eggman');
		eggmanJump.cameras = [PlayState.instance.camCutscene];
		eggmanJump.alpha = 0;
		PlayState.instance.add(eggmanJump);
		
		screenGlitch1 = FunkinSprite.create(-600, -200);
        screenGlitch1.frames = Paths.getSparrowAtlas('Xenostage/P3_Stat');
        screenGlitch1.scrollFactor.set(1, 1);
        screenGlitch1.scale.set(5.5, 5.5);
        screenGlitch1.animation.addByPrefix('busk', 'Phase3Static instance 1', 34, false); // org. framerate is 36 // 24 (base game)
        screenGlitch1.animation.play('busk');
        screenGlitch1.zIndex = 20;
		screenGlitch1.visible = false;
		screenGlitch1.animation.finishCallback = function() {
            screenGlitch1.visible = false;
        };
		PlayState.instance.add(screenGlitch1);
	}

	function switchStageBackground(area:String):Void {
		p3_Stats = getNamedProp('p3_Stats');
		p3_Glitch = getNamedProp('p3_Glitch');

		switch (area) {
			case 'xenoBG':
				p3_Stats.zIndex = 4;
				p3_Glitch.zIndex = 1;
				return;
			case 'glitchBG':
				p3_Stats.zIndex = 1;
				p3_Glitch.zIndex = 4;
				return;
			default:
				return;
		}
		PlayState.instance.currentStage.refresh();
	}

	function switchStrumlines(mode:String):Void {
		if (FlxG.onMobile) return;

		switch (mode) {
			case 'swap':
				PlayState.instance.playerStrumline.x = originalOpponentStrumlineX;
				PlayState.instance.opponentStrumline.x = originalPlayerStrumlineX;
				return;
			case 'reset':
		        PlayState.instance.playerStrumline.x = originalPlayerStrumlineX;
		        PlayState.instance.opponentStrumline.x = originalOpponentStrumlineX;
			default:
				return;
		}
	}

	function doJumpscare(jumpscareType:String):Void { // make it an event? not today
		if (!doJumpscares) return;

		switch (jumpscareType) {
			case 'tails':
				tailsJump.alpha = 1;
				FlxTween.tween(tailsJump, { alpha: 0 }, 1.5);
				var tailsScream = FunkinSound.playOnce(Paths.sound("TailsScreamLOL"), 0.4);
				FlxTween.tween(tailsScream, {volume: 0}, 1.5);
				return;
			case 'knuckles':
				knucklesJump.alpha = 1;
				FlxTween.tween(knucklesJump, { alpha: 0 }, 1.5);
				var knucklesScream = FunkinSound.playOnce(Paths.sound("KnucklesScreamLOL"), 0.4);
				FlxTween.tween(knucklesScream, {volume: 0}, 1.5);
				return;
			case 'eggman':
				eggmanJump.alpha = 1;
				FlxTween.tween(eggmanJump, { alpha: 0 }, 1.5);
				var eggmanScream = FunkinSound.playOnce(Paths.sound("EggmanScreamLOL"), 0.4);
				FlxTween.tween(eggmanScream, {volume: 0}, 1.5);
				return;
			default:
				return;
		}

        blackOverlay.alpha = 1;
		FlxTween.tween(blackOverlay, { alpha: 0 }, 1.5);
	}

	function startStaticTransition():Void {
		screenGlitch1.visible = true;
		screenGlitch1.animation.play('busk');
	}

	function onStepHit(event:SongTimeScriptEvent):Void {
		super.onStepHit(event);

		if (!PlayState.instance.currentSong.id.toLowerCase() == "triple-trouble") return;

		switch (event.step) {
			case 4: // Song startup
				startStaticTransition();
			case 151: // Tails jumpscare
				doJumpscare('tails');
			case 1029: // Transition to Xeno BG
				startStaticTransition();
			case 1038:
				switchStageBackground('xenoBG');
			case 1094: // Static during Xeno section
				startStaticTransition();
			case 1221:
				startStaticTransition();
			case 1285:
				startStaticTransition();
			case 1296: // Knuckles jumpscare + swap strumlines
				switchStageBackground('glitchBG');
				switchStrumlines('swap');
				doJumpscare('knuckles');
		    case 2308: // Transition to Xeno BG 2
				startStaticTransition();
			case 2320:
				switchStageBackground('xenoBG');
			case 2820:
				startStaticTransition();
			case 2824: // Eggman jumpscare + reset strumlines
				switchStageBackground('glitchBG');
				switchStrumlines('reset');
				doJumpscare('eggman');
			case 3160:
				startStaticTransition();
			case 3384:
				startStaticTransition();
			case 3947:
				startStaticTransition();
			case 3957:
				switchStageBackground('xenoBG');
		}
	}
	override function onSongRetry(event:ScriptEvent):Void {
		super.onSongRetry(event);

		switchStageBackground('glitchBG');
		switchStrumlines('reset');
	}
}