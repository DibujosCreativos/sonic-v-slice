import flixel.FlxG;
import flixel.math.FlxBasePoint;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxTimer;
import flixel.FlxCamera;
import funkin.graphics.FunkinSprite;
import funkin.Paths;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.play.song.Song;
import flixel.FlxSprite;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import funkin.modding.module.ModuleHandler;
import funkin.ui.FullScreenScaleMode;
import flixel.system.scaleModes.RatioScaleMode;
import lime.app.Application;
import flixel.math.FlxRandom;
import funkin.play.ResultState;
import funkin.util.TouchUtil;
import funkin.input.Cursor;

class FatalZone extends Stage
{
	var statix:FunkinSprite;
	var leftBorder:FlxSprite;
	var rightBorder:FlxSprite;
	var IsWindowMoving:Bool = false;

    var Xamount = 0;
    var Yamount = 0;
    var windowX = 0;
    var windowY = 0;
	
	var errorRandom:FlxRandom = new FlxRandom(666); // so that every time you play the song, the error popups are in the same place


	public function new()
	{
		super("fatalZone");
	}
	
	override function onSubStateOpenEnd(event) {
		super.onSubStateOpenEnd(event);
		if (Std.isOfType(event.targetState, ResultState) && screenRatioEdit) {
			if (!FlxG.onMobile) {
				var wasFullscreen = Application.current.window.fullscreen;
				Application.current.window.fullscreen = false;
				var wideScreen = (26 * 6) + 4;

				FlxG.initialWidth = FlxG.width = 1280;
				FlxG.initialHeight = FlxG.height = 720;
				FlxG.stage.stageWidth = 1280;
				FlxG.resizeWindow(1280, 720);
				for (cameras in FlxG.cameras.list) {
					cameras.width = FlxG.initialWidth;
					cameras.height = FlxG.initialHeight;
				}
				FlxG.camera.width = FlxG.initialWidth;
				FlxG.camera.height = FlxG.initialHeight;
    			var resolutionX = Math.ceil(Application.current.window.display.currentMode.width * Application.current.window.scale);
    			var resolutionY = Math.ceil(Application.current.window.display.currentMode.height * Application.current.window.scale);
    			Application.current.window.x = (resolutionX - Application.current.window.width) / 2;
    			Application.current.window.y = (resolutionY - Application.current.window.height) / 2;

				FlxG.scaleMode = new FullScreenScaleMode(); // Change the mode to recenter the game
				//Return to fullscreen to fix the camera offset weirdness
				if (wasFullscreen) Application.current.window.fullscreen = true;
			}
		}
	}
	
	override function onCreate(event:ScriptEvent):Void
	{
		super.onCreate(event);

		game = PlayState.instance;
        
		screenRatioEdit = ModuleHandler.getModule("EXEOptions").scriptGet("screenratio");
		modChartsEnabled = ModuleHandler.getModule("EXEOptions").scriptGet("modcharts");
		doFatalPopups = ModuleHandler.getModule("EXEOptions").scriptGet("fatalpopups");

		FunkinSprite.cacheTexture(Paths.image('fatal/domain'));
		FunkinSprite.cacheTexture(Paths.image('fatal/domain2'));
		FunkinSprite.cacheTexture(Paths.image('fatal/truefatalstage'));
		FunkinSprite.cacheTexture(Paths.image('error_popups'));

		statix = FunkinSprite.create(0, 0);
		statix.frames = Paths.getSparrowAtlas('statix');
		statix.animation.addByPrefix('static', 'statixx', 44, false);
		statix.animation.play('static');
		statix.scale.set(5.5, 5.5);
		statix.cameras = [game.camHUD];
		game.add(statix);
		statix.visible = false;
		statix.animation.finishCallback = function() {
			statix.visible = false;
		};

		if (screenRatioEdit) {
			if (FlxG.onMobile) {
				leftBorder = new FlxSprite(0, 0).makeGraphic(50, FlxG.height, 0xFF000000);
				leftBorder.scrollFactor.set(0, 0);
				leftBorder.scale.set(5, 3);
				leftBorder.cameras = [game.camHUD];
				game.add(leftBorder);

				rightBorder = new FlxSprite(FlxG.width - 50, 0).makeGraphic(50, FlxG.height, 0xFF000000);
				rightBorder.scrollFactor.set(0, 0);
				rightBorder.scale.set(5, 3);
				rightBorder.cameras = [game.camHUD];
				game.add(rightBorder);
			} else {
				var wasFullscreen = Application.current.window.fullscreen;
				Application.current.window.fullscreen = false;
				var wideScreen = (26 * 6) + 4;

				FlxG.initialWidth = FlxG.width = 960;
				FlxG.initialHeight = FlxG.height = 720;
				FlxG.stage.stageWidth = 960;
				FlxG.resizeWindow(960, 720);
				for (cameras in FlxG.cameras.list) {
					cameras.width = FlxG.initialWidth;
					cameras.height = FlxG.initialHeight;
				}
				FlxG.camera.width = FlxG.initialWidth;
				FlxG.camera.height = FlxG.initialHeight;
    			var resolutionX = Math.ceil(Application.current.window.display.currentMode.width * Application.current.window.scale);
    			var resolutionY = Math.ceil(Application.current.window.display.currentMode.height * Application.current.window.scale);
    			Application.current.window.x = (resolutionX - Application.current.window.width) / 2;
    			Application.current.window.y = (resolutionY - Application.current.window.height) / 2;

				FlxG.scaleMode = new RatioScaleMode(); // Change the mode to recenter the game
				//Return to fullscreen to fix the camera offset weirdness
				if (wasFullscreen) Application.current.window.fullscreen = true;
			}
		}

		if (doFatalPopups) {
			FlxG.mouse.visible = true;
			FlxG.mouse.unload();
			FlxG.log.add("Sexy mouse cursor " + Paths.image("fatal_mouse_cursor"));
			FlxG.mouse.load(Assets.getBitmapData(Paths.image('fatal_mouse_cursor')), 1.5, 0);
			popupTimer = new FlxTimer();
		}
	}

	function clearPopups():Void
	{
		if (doFatalPopups) {
			while(FatalPopup.popups.length>0)
				FatalPopup.popups[0].close();
		}
	}

	function managePopups(){
		if (FlxG.mouse.justPressed || TouchUtil.justPressed){
			trace("click :)");
			for(idx in 0...FatalPopup.popups.length){
				var realIdx = (FatalPopup.popups.length - 1) - idx;
				var popup = FatalPopup.popups[realIdx];
				var hitShit:Bool=false;
				for(camera in popup.cameras){
					@:privateAccess
					var hitOK = popup.clickDetector.overlapsPoint(FlxG.mouse.getWorldPosition(camera, popup.clickDetector._point), true, camera);
					if (FlxG.onMobile) hitOK = TouchUtil.overlapsComplex(popup, camera);
					if (hitOK){
						popup.close();
						hitShit=true;
						break;
					}
				}
				if(hitShit)break;
			}
		}
	}

	public override function onDestroy(event) {
		super.onDestroy(event);
		if (doFatalPopups) Cursor.hide();
		if (screenRatioEdit) {
			if (!FlxG.onMobile && FlxG.width != 1280) {
				var wasFullscreen = Application.current.window.fullscreen;
				Application.current.window.fullscreen = false;
				var wideScreen = (26 * 6) + 4;

				FlxG.initialWidth = FlxG.width = 1280;
				FlxG.initialHeight = FlxG.height = 720;
				FlxG.stage.stageWidth = 1280;
				FlxG.resizeWindow(1280, 720);
				for (cameras in FlxG.cameras.list) {
					cameras.width = FlxG.initialWidth;
					cameras.height = FlxG.initialHeight;
				}
				FlxG.camera.width = FlxG.initialWidth;
				FlxG.camera.height = FlxG.initialHeight;
    			var resolutionX = Math.ceil(Application.current.window.display.currentMode.width * Application.current.window.scale);
    			var resolutionY = Math.ceil(Application.current.window.display.currentMode.height * Application.current.window.scale);
    			Application.current.window.x = (resolutionX - Application.current.window.width) / 2;
    			Application.current.window.y = (resolutionY - Application.current.window.height) / 2;

				FlxG.scaleMode = new FullScreenScaleMode(); // Change the mode to recenter the game
				//Return to fullscreen to fix the camera offset weirdness
				if (wasFullscreen) Application.current.window.fullscreen = true;
			}
		}
	}

	public override function onSongEnd(event) {
		super.onSongEnd(event);
		if (doFatalPopups) Cursor.hide();
		if (screenRatioEdit) {
			if (!FlxG.onMobile) {
				var wasFullscreen = Application.current.window.fullscreen;
				Application.current.window.fullscreen = false;
				var wideScreen = (26 * 6) + 4;

				FlxG.initialWidth = FlxG.width = 1280;
				FlxG.initialHeight = FlxG.height = 720;
				FlxG.stage.stageWidth = 1280;
				FlxG.resizeWindow(1280, 720);
				for (cameras in FlxG.cameras.list) {
					cameras.width = FlxG.initialWidth;
					cameras.height = FlxG.initialHeight;
				}
				FlxG.camera.width = FlxG.initialWidth;
				FlxG.camera.height = FlxG.initialHeight;
    			var resolutionX = Math.ceil(Application.current.window.display.currentMode.width * Application.current.window.scale);
    			var resolutionY = Math.ceil(Application.current.window.display.currentMode.height * Application.current.window.scale);
    			Application.current.window.x = (resolutionX - Application.current.window.width) / 2;
    			Application.current.window.y = (resolutionY - Application.current.window.height) / 2;

				FlxG.scaleMode = new FullScreenScaleMode(); // Change the mode to recenter the game
				//Return to fullscreen to fix the camera offset weirdness
				if (wasFullscreen) Application.current.window.fullscreen = true;
			}
		}
	}

	public override function onSongEvent(scriptEvent:SongEventScriptEvent) {
		super.onSongEvent(scriptEvent);
		switch (scriptEvent.eventData.eventKind) {
			case "Fatality Popup": 
				if (doFatalPopups) {
					var eventProps = scriptEvent.eventData.value;

					var value:Int = Std.parseInt(eventProps.value1);
					if (eventProps.value1 == '' || value < 1)
						value = 1;

					var type:Int = Std.parseInt(eventProps.value2);
					if (eventProps.value2 == '' || type < 1)
						type = 1;
					for(idx in 0...value){
						doPopup(type);
					}
				}
			case "Clear Popups": clearPopups();
		}
	}	

	function doPopup(type) {
		var popup = new FatalPopup(0, 0, type);
		var popuppos:Array<Int> = [errorRandom.int(0, Std.int(FlxG.width - popup.width)), errorRandom.int(0, Std.int(FlxG.height - popup.height))];
		popup.x = popuppos[0];
		popup.y = popuppos[1];
		popup.cameras = [PlayState.instance.camCutscene];
		PlayState.instance.add(popup);
	}

	function shakescreen()
	{
		new FlxTimer().start(0.01, function(tmr:FlxTimer)
		{
			Application.current.window.move(Application.current.window.x + FlxG.random.int(-10, 10), Application.current.window.y + FlxG.random.int(-8, 8));
		}, 50);
	}

	override function update(elapsed:Float):Void
	{
		super.update(elapsed);
		if (IsWindowMoving && modChartsEnabled && !FlxG.onMobile) {
			var thisX:Float = Math.sin(Xamount * (Xamount)) * 100;
			var thisY:Float = Math.sin(Yamount * (Yamount)) * 100;
			var yVal = Std.int(windowY + thisY);
			var xVal = Std.int(windowX + thisX);
			if (!Application.current.window.fullscreen) Application.current.window.move(xVal, yVal);
			Yamount = Yamount + 0.0015;
			Xamount = Xamount + 0.00075;
		}
		if (doFatalPopups) {
			managePopups();
		}
	}

	function onCountdownStart()
	{
		PlayState.instance.playerStrumline.noteHoldCovers.clear();
		IsWindowMoving = false;
		Xamount = 0;
		Yamount = 0;
		if (PlayState.instance.opponentStrumline != null && PlayState.instance.playerStrumline != null) {
			originalPlayerStrumlineX = PlayState.instance.playerStrumline.x;
			originalOpponentStrumlineX = PlayState.instance.opponentStrumline.x;
			originalOpponentStrumlineVisible = PlayState.instance.opponentStrumline.visible;
			
			if (screenRatioEdit && !FlxG.onMobile) {
				PlayState.instance.playerStrumline.x = (FlxG.width / 2 + 24);
				PlayState.instance.opponentStrumline.x = 24;
				//PlayState.instance.opponentStrumline.x = 150;
				//PlayState.instance.playerStrumline.x = 692;
			}
		}
	}

	function windowGoBack()
	{
		new FlxTimer().start(0.01, function(tmr:FlxTimer)
		{
			var xLerp:Float = FlxMath.lerp(windowX, Application.current.window.x, 0.95);
			var yLerp:Float = FlxMath.lerp(windowY, Application.current.window.y, 0.95);
			Application.current.window.move(Std.int(xLerp), Std.int(yLerp));
		}, 20);
	}

	function onStepHit(event:SongTimeScriptEvent):Void
	{
		var phase2 = getNamedProp('fatalityBg2');
		var phase2bg = getNamedProp('fatalityBg3');
		var phase3bg = getNamedProp('fatalityBg4');

		switch (event.step) {
			case 257:
				statix.visible = true;
				statix.animation.play('static');

				if (statix != null) {
					var timer = new FlxTimer();
					timer.start(0.12, function(timer:FlxTimer):Void {
						statix.visible = false;
					});
				}
			
				phase2bg.zIndex = 11;
				phase2.zIndex = 12;
				PlayState.instance.currentStage.refresh();
			case 1984:
				Xamount += 2;
				Yamount += 2;
				windowX = Application.current.window.x;
				windowY = Application.current.window.y;
				IsWindowMoving = true;
				statix.visible = true;
				statix.animation.play('static');

				if (statix != null) {
					var timer2 = new FlxTimer();
					timer2.start(0.12, function(timer:FlxTimer):Void {
						statix.visible = false;
					});
				}

				if (modChartsEnabled && !FlxG.onMobile) {
				    PlayState.instance.playerStrumline.x = FlxG.width / 2 - PlayState.instance.playerStrumline.width / 2;
					PlayState.instance.playerStrumline.noteHoldCovers.clear();
				    PlayState.instance.opponentStrumline.visible = false;
				}
			
				phase3bg.zIndex = 20;
				PlayState.instance.currentStage.refresh(); // Apply Z-Index.
			case 2208:
				IsWindowMoving = false;
			case 2230:
				shakescreen();
				PlayState.instance.camGame.shake(0.02, 0.8);
				PlayState.instance.camHUD.shake(0.02, 0.8);
			case 2240:
				IsWindowMoving = true;
			case 2528:
				shakescreen();
				IsWindowMoving = true;
				Yamount += 3;
				Xamount += 3;
				PlayState.instance.camGame.shake(0.02, 2);
				PlayState.instance.camHUD.shake(0.02, 2);
			case 2530:
				shakescreen();
			case 2535:
				shakescreen();
			case 2540:
				shakescreen();
			case 2545:
				shakescreen();
			case 2550:
				shakescreen();
			case 2555:
				shakescreen();
			case 2560:
				IsWindowMoving = false;
				windowGoBack();
		}
	}
}
