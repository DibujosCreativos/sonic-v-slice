import flixel.FlxG;
import flixel.FlxSprite;
import flixel.util.FlxTimer;
import flixel.tweens.FlxTween;
import funkin.Paths;
import funkin.Conductor;
import funkin.FunkinMemory;
import funkin.play.PlayState;
import funkin.play.stage.Stage;
import funkin.audio.FunkinSound;
import funkin.graphics.FunkinSprite;
import funkin.modding.module.ModuleHandler;

import ObjectHandler;

class HillZone extends Stage {
	public function new() {
		super('hillZone');
    }

    public var doScreenStatic:Bool = true;
    public var doJumpscares:Bool = true;
    public var doCinematics:Bool = true;
    public var doModcharts:Bool = true;

    public var blackOverlay:FlxSprite;
	public var topBorder:FlxSprite;
	public var bottomBorder:FlxSprite;

    public var sonicJumpscare:FunkinSprite;
    public var sonicJump:FunkinSprite;
    public var staticScreen:FunkinSprite;

	var doStrumlineWiggle:Bool = false;
	var basePlayerStrumPos:Float = 0;
	var baseOpponentStrumPos:Float = 0;
	var basePlayerStrumPosY:Float = 0;
	var baseOpponentStrumPosY:Float = 0;
	var strumlinePositionSet:Bool = false;
	var wiggleIntensity:Float = 8;

    override function onCreate(event:ScriptEvent):Void {
        super.onCreate(event);

        ObjectHandler.preloadSonicAnimation();

		FunkinMemory.cacheSound(Paths.sound("sppok", "shared"));
		FunkinMemory.cacheSound(Paths.sound("datOneSound", "shared"));
        FunkinMemory.cacheSound(Paths.sound("staticBUZZ", "shared"));

        doScreenStatic = ModuleHandler.getModule("EXEOptions").scriptGet("screenstatic");
        doJumpscares = ModuleHandler.getModule("EXEOptions").scriptGet("dojumpscares");
        doCinematics = ModuleHandler.getModule("EXEOptions").scriptGet("cinematiceffect");
        doModcharts = ModuleHandler.getModule("EXEOptions").scriptGet("modcharts");

        // Black overlay used for transitions
        blackOverlay = new FlxSprite(0, 0);
        blackOverlay.makeGraphic(FlxG.width, FlxG.height, 0xFF000000);
        blackOverlay.scrollFactor.set();
        blackOverlay.cameras = [PlayState.instance.camCutscene];
        blackOverlay.zIndex = 5000;
        PlayState.instance.add(blackOverlay);
        blackOverlay.alpha = 0;

        // Letterbox used for cinematics (top and bottom black bars)
		topBorder = new FlxSprite(0, -50).makeGraphic(FlxG.width, 50, 0xFF000000);
        topBorder.cameras = [PlayState.instance.camCutscene];
        topBorder.scale.set(5, 5);
        topBorder.alpha = 0;
        PlayState.instance.add(topBorder);

        bottomBorder = new FlxSprite(0, FlxG.height - 0).makeGraphic(FlxG.width, 50, 0xFF000000);
        bottomBorder.cameras = [PlayState.instance.camCutscene];
        bottomBorder.scale.set(5, 5);
        bottomBorder.alpha = 0;
        PlayState.instance.add(bottomBorder);

        // Jumpscares, static, etc
		staticScreen = FunkinSprite.createSparrow(100, 0, "daSTAT");
        staticScreen.animation.addByPrefix('static', 'staticFLASH', 30, false); // Speed it up
        staticScreen.animation.play('static');
		staticScreen.scale.set(FlxG.onMobile ? 6.15 : 5, FlxG.onMobile ? 5.1 : 5);
        staticScreen.zIndex = 5000;
		staticScreen.cameras = [PlayState.instance.camHUD];
		staticScreen.visible = false;
		staticScreen.animation.finishCallback = function() {
            staticScreen.visible = false;
        };
		PlayState.instance.add(staticScreen);

		sonicJumpscare = FunkinSprite.createSparrow(0, 0, "sonicJUMPSCARE");
        sonicJumpscare.setPosition(FlxG.onMobile ? 200 : 150, 115);
        sonicJumpscare.animation.addByPrefix('spook', 'sonicSPOOK', 24, false); // org. framerate is 36 // 24 (base game)
        sonicJumpscare.animation.play('spook');
		sonicJumpscare.cameras = [PlayState.instance.camCutscene];
		sonicJumpscare.animation.finishCallback = function() {
            sonicJumpscare.visible = false;
        };
        sonicJumpscare.visible = false;
		PlayState.instance.add(sonicJumpscare);

        sonicJump = FunkinSprite.create(FlxG.onMobile ? 200 : 0, 0, "simplejump720");
		sonicJump.cameras = [PlayState.instance.camCutscene];
        sonicJump.zIndex = 5001;
		sonicJump.visible = false;
		PlayState.instance.add(sonicJump);

    }
    public function cinematics(mode:String):Void {
        if (!doCinematics || FlxG.onMobile || PlayState.instance.currentSong.id.toLowerCase() != "too-slow") return;

        switch (mode) {
            case "show":
                FlxTween.tween(topBorder, {alpha: 1}, 1);
                FlxTween.tween(bottomBorder, {alpha: 1}, 1);
                PlayState.instance.camHUD.alpha = 0;
                return;
            case "hide":
                FlxTween.tween(topBorder, {alpha: 0}, 1);
                FlxTween.tween(bottomBorder, {alpha: 0}, 1);
                PlayState.instance.camHUD.alpha = 1;
                return;
            default:
                return;
        }
    }
    public function jumpscare(mode:String):Void {
        if (!doJumpscares || PlayState.instance.currentSong.id.toLowerCase() != "too-slow") return;

        switch (mode) {
            case "animated":
                sonicJumpscare.visible = true;
		        sonicJumpscare.animation.play('spook');
		        FunkinSound.playOnce(Paths.sound("datOneSound"), 1);
                return;
            case "image":
                blackOverlay.alpha = 1;
                sonicJump.visible = true;
                new FlxTimer().start(0.3, function(timer:FlxTimer) {
				    sonicJump.visible = false;
                    blackOverlay.alpha = 0;
			    });
			    FunkinSound.playOnce(Paths.sound("sppok"), 1);
                return;
            default:
                return;
        }
    }
    public function screenStatic():Void {
        if (!doScreenStatic) return;

		staticScreen.visible = true;
		staticScreen.animation.play('static');
		staticSound = FunkinSound.playOnce(Paths.sound("staticBUZZ"), 0.6);
		FlxTween.tween(staticSound, { volume: 0 }, 1);
    }
    function startModchart():Void {
        if (!doModcharts || PlayState.instance.currentSong.id.toLowerCase() != "too-slow") return;

		doStrumlineWiggle = true;
    }
	override function onUpdate(event:UpdateScriptEvent):Void {
		super.onUpdate(event);

		
		if (!strumlinePositionSet && PlayState.instance.playerStrumline != null && PlayState.instance.opponentStrumline != null) {
			basePlayerStrumPos = PlayState.instance.playerStrumline.x;
			baseOpponentStrumPos = PlayState.instance.opponentStrumline.x;
			basePlayerStrumPosY = PlayState.instance.playerStrumline.strumlineNotes.members[0] != null ? PlayState.instance.playerStrumline.strumlineNotes.members[0].y : 0;
			baseOpponentStrumPosY = PlayState.instance.opponentStrumline.strumlineNotes.members[0] != null ? PlayState.instance.opponentStrumline.strumlineNotes.members[0].y : 0;
			strumlinePositionSet = true;
		}

		if (doStrumlineWiggle) {
			var curbet = (Conductor.instance.songPosition/1000)*(Conductor.instance.bpm/60);
			for (i in 0...4) {
				if (PlayState.instance.playerStrumline.strumlineNotes.members[i] != null)
					PlayState.instance.playerStrumline.strumlineNotes.members[i].y = basePlayerStrumPosY + (wiggleIntensity * Math.cos((curbet + i*0.25) * Math.PI));
				if (PlayState.instance.opponentStrumline.strumlineNotes.members[i] != null)
					PlayState.instance.opponentStrumline.strumlineNotes.members[i].y = baseOpponentStrumPosY + (wiggleIntensity * Math.cos((curbet + i*0.25) * Math.PI));
			}
			PlayState.instance.playerStrumline.x = basePlayerStrumPos + Math.sin(curbet * Math.PI) * wiggleIntensity;
			PlayState.instance.opponentStrumline.x = baseOpponentStrumPos + Math.sin(curbet * Math.PI) * wiggleIntensity;
		}
	}
	function onSongRetry() {
		super.onSongRetry();

		doStrumlineWiggle = false;
		strumlinePositionSet = false;
        blackOverlay.alpha = 0;

        cinematics("hide");
	}
    function onStepHit(event:SongTimeScriptEvent):Void {
        super.onStepHit(event);

        if (!PlayState.instance.currentSong.id.toLowerCase() == "too-slow") return;

        if (event.beat == 2 || event.beat % 35 == 0)
		{
            screenStatic();
		}
        // Default variation
        if (PlayState.instance.currentVariation == "default") {
            switch (event.step) {
                case 761:
                    FlxG.camera.flash(0xFFFF0000, 1); // Red
                case 1166:
                    cinematics("show");
                case 1190:
                    jumpscare("image");
                case 1261:
                    cinematics("hide");
                    startModchart();
                case 1472:
                    jumpscare("animated");
            }
        }
        // Encore variation
        if (PlayState.instance.currentVariation == "encore") {
            switch (event.step) {
                case 385:
                    blackOverlay.alpha = 1;
                    PlayState.instance.camCutscene.flash(0xFFFFFFFF, 1);
                case 398:
                    blackOverlay.alpha = 0;
                case 837:
                    cinematics("show");
                case 863:
                    jumpscare("image");
                case 934:
                    cinematics("hide");
                    startModchart();
                case 1129:
                    PlayState.instance.camCutscene.flash(0xFFFFFFFF, 1); // White
                case 1217:
                    PlayState.instance.camCutscene.flash(0xFFFF0000, 1); // Red
                case 1279:
                    PlayState.instance.camCutscene.flash(0xFFFFFFFF, 1); // White
                case 1303:
                    jumpscare("animated");
            }
        }
    }
}